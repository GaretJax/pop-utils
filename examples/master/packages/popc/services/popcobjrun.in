#!/bin/sh
# This script provides an ability to run a program stored on an HTTP server
# (it is used every time an object is created)

if [ $# -eq 0 ]; then
echo "Usage: popcobjrun <url> arguments...."
exit 1
fi

MY_POPC_PROXY=""
prog=""
drun=0

if [ -n "${POPC_PROXY}" ]; then
MY_POPC_PROXY="-proxy=${POPC_PROXY}"
fi

#parse arguments
for arg in $* ; do
    if [ "$arg" = "-drun" ]; then
      drun=1
    elif [ `echo "$arg"|grep "^\-batch="` ]; then
      export POPC_BATCH=`echo $arg|sed s/-batch=//`
    elif [ -z "${prog}" ]; then
      prog=$arg
    else
      args="$args $arg"
    fi
done

if [ -z "${POPC_LOCATION}" ]; then
  if [ "X${POPC_BATCH}" = "Xsmscg" ]; then
    POPC_LOCATION=`dirname $0`/..
  else
    POPC_LOCATION=@prefix@
  fi
export POPC_LOCATION
fi
. $POPC_LOCATION/etc/popc-runtime-env.sh


if [ "$drun" = "1" ]; then
    echo "Exec: ${POPC_JOB_EXEC} $prog $args"
elif [ ! "X`which $prog 2>/dev/null`" = "X" ]; then
#    echo "${POPC_JOB_EXEC} $prog $args 
    ${POPC_JOB_EXEC} $prog $args &
    RETVAL=$?
    exit $RETVAL
else
    TMPDIR=${POPC_TEMP:=/tmp}
    wget=`which wget`
    pid=$$

    prog1="$TMPDIR/parobject_${USER}_${pid}"

    echo "Downloading the executable file..."

#Check for Globus GridFTP files....

    gsiprog=`echo $prog | grep ^'gsiftp://'`
    if [ "X${gsiprog}" = "X" ]; then
	$wget -q $prog -O $prog1
	RETVAL=$?
    else 
	if [ "X$GLOBUS_LOCATION" != "X" ]; then
	    . $GLOBUS_LOCATION/etc/globus-user-env.sh
	fi
	gsiftpget=`which globus-url-copy`
	if [ "X${gsiftpget}" = "X" ]; then
	    echo "globus-url-copy is required to stage the executable!"
	    exit 1
	fi
	$gsiftpget $prog file://$prog1
	RETVAL=$?

    fi
    if [ $RETVAL -ne 0 ]; then
	echo "File not found or failed to download the file : $prog"
        exit $RETVAL
    fi
    
    if [ ! -f $prog1 ]; then
        echo "${prog1} not found"
        exit 1
    else
        chmod +x $prog1
#        echo "Now EXEC: ${POPC_JOB_EXEC} ${TMPDIR}/$prog1 $* ${MY_POPC_PROXY}"
	${POPC_JOB_EXEC} $prog1 $args
        RETVAL=$?
	rm -f $prog1
        exit $RETVAL
    fi
fi
